// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DonorDbContext))]
    [Migration("20250426111503_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.BloodCompatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FromBloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ToBloodTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromBloodTypeId");

                    b.HasIndex("ToBloodTypeId");

                    b.ToTable("BloodCompatibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 6
                        },
                        new
                        {
                            Id = 7,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 7
                        },
                        new
                        {
                            Id = 8,
                            FromBloodTypeId = 1,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 9,
                            FromBloodTypeId = 2,
                            ToBloodTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            FromBloodTypeId = 2,
                            ToBloodTypeId = 4
                        },
                        new
                        {
                            Id = 11,
                            FromBloodTypeId = 2,
                            ToBloodTypeId = 6
                        },
                        new
                        {
                            Id = 12,
                            FromBloodTypeId = 2,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 13,
                            FromBloodTypeId = 3,
                            ToBloodTypeId = 3
                        },
                        new
                        {
                            Id = 14,
                            FromBloodTypeId = 3,
                            ToBloodTypeId = 4
                        },
                        new
                        {
                            Id = 15,
                            FromBloodTypeId = 3,
                            ToBloodTypeId = 7
                        },
                        new
                        {
                            Id = 16,
                            FromBloodTypeId = 3,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 17,
                            FromBloodTypeId = 4,
                            ToBloodTypeId = 4
                        },
                        new
                        {
                            Id = 18,
                            FromBloodTypeId = 4,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 19,
                            FromBloodTypeId = 5,
                            ToBloodTypeId = 5
                        },
                        new
                        {
                            Id = 20,
                            FromBloodTypeId = 5,
                            ToBloodTypeId = 6
                        },
                        new
                        {
                            Id = 21,
                            FromBloodTypeId = 5,
                            ToBloodTypeId = 7
                        },
                        new
                        {
                            Id = 22,
                            FromBloodTypeId = 5,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 23,
                            FromBloodTypeId = 6,
                            ToBloodTypeId = 6
                        },
                        new
                        {
                            Id = 24,
                            FromBloodTypeId = 6,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 25,
                            FromBloodTypeId = 7,
                            ToBloodTypeId = 7
                        },
                        new
                        {
                            Id = 26,
                            FromBloodTypeId = 7,
                            ToBloodTypeId = 8
                        },
                        new
                        {
                            Id = 27,
                            FromBloodTypeId = 8,
                            ToBloodTypeId = 8
                        });
                });

            modelBuilder.Entity("Domain.BloodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BloodTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "O-"
                        },
                        new
                        {
                            Id = 2,
                            Type = "O+"
                        },
                        new
                        {
                            Id = 3,
                            Type = "A-"
                        },
                        new
                        {
                            Id = 4,
                            Type = "A+"
                        },
                        new
                        {
                            Id = 5,
                            Type = "B-"
                        },
                        new
                        {
                            Id = 6,
                            Type = "B+"
                        },
                        new
                        {
                            Id = 7,
                            Type = "AB-"
                        },
                        new
                        {
                            Id = 8,
                            Type = "AB+"
                        });
                });

            modelBuilder.Entity("Domain.DonationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("RadiusInMeters")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DonationRequests");
                });

            modelBuilder.Entity("Domain.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastDonation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("Domain.BloodCompatibility", b =>
                {
                    b.HasOne("Domain.BloodType", "FromBloodType")
                        .WithMany()
                        .HasForeignKey("FromBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.BloodType", "ToBloodType")
                        .WithMany()
                        .HasForeignKey("ToBloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromBloodType");

                    b.Navigation("ToBloodType");
                });

            modelBuilder.Entity("Domain.Donor", b =>
                {
                    b.HasOne("Domain.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");
                });
#pragma warning restore 612, 618
        }
    }
}
